// サンキーダイアグラム作成ツール
class SankeyDiagramTool {
    constructor() {
        this.links = [];
<<<<<<< HEAD
        this.chartData = null;
        this.nodeColors = new Map();
        this.unit = '円'; // 単位を管理
=======
        this.currentInputMethod = 'csv';
        this.chartData = null;
>>>>>>> a96292e57ebae21211d01e2ddf3f0c16b66fe4dc

        this.initializeEventListeners();
        this.loadSampleData();
    }

    initializeEventListeners() {
<<<<<<< HEAD
        // テキスト入力のリアルタイム更新
        document.getElementById('text-data').addEventListener('input', () => {
            this.parseTextData();
            this.autoGenerateDiagram();
        });

        // 単位入力の変更
        document.getElementById('unit-field').addEventListener('input', (e) => {
            this.unit = e.target.value.trim() || '';
            this.autoGenerateDiagram();
        });

        // アクション
=======
        // 入力方法の切り替え
        document.getElementById('csv-input-btn').addEventListener('click', () => {
            this.switchInputMethod('csv');
        });

        document.getElementById('manual-input-btn').addEventListener('click', () => {
            this.switchInputMethod('manual');
        });

        document.getElementById('sample-data-btn').addEventListener('click', () => {
            this.loadSampleData();
        });

        // 手動入力
        document.getElementById('add-link-btn').addEventListener('click', () => {
            this.addLink();
        });

        // エンターキーでリンク追加
        ['source-input', 'target-input', 'value-input'].forEach(id => {
            document.getElementById(id).addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.addLink();
                }
            });
        });

        // スタイル設定
        document.getElementById('opacity-slider').addEventListener('input', (e) => {
            document.getElementById('opacity-value').textContent = e.target.value;
            this.updateChartStyle();
        });

        document.getElementById('node-color').addEventListener('change', () => {
            this.updateChartStyle();
        });

        document.getElementById('link-color').addEventListener('change', () => {
            this.updateChartStyle();
        });

        // アクション
        document.getElementById('generate-btn').addEventListener('click', () => {
            this.generateDiagram();
        });

>>>>>>> a96292e57ebae21211d01e2ddf3f0c16b66fe4dc
        document.getElementById('export-btn').addEventListener('click', () => {
            this.exportSVG();
        });
    }

<<<<<<< HEAD
    loadSampleData() {
        // 単位フィールドから初期値を読み込み
        const unitField = document.getElementById('unit-field');
        if (unitField) {
            this.unit = unitField.value.trim() || '';
        }

        // サンプルデータをテキストエリアに設定
        const sampleText = `Web広告 [1000] サイト訪問
検索エンジン [800] サイト訪問
SNS [600] サイト訪問
サイト訪問 [1200] 商品閲覧
サイト訪問 [1200] 離脱
商品閲覧 [400] カート追加
商品閲覧 [800] 離脱
カート追加 [300] 購入完了
カート追加 [100] 離脱`;

        document.getElementById('text-data').value = sampleText;
        this.parseTextData();

        // 初期ダイアグラムを生成（DOMの描画完了を待つ）
        setTimeout(() => {
            this.generateDiagram();
        }, 500);
    }

    parseTextData() {
        const textData = document.getElementById('text-data').value.trim();
        const lines = textData.split('\n');
        const parsedLinks = [];

        lines.forEach((line, index) => {
            const trimmedLine = line.trim();
            if (!trimmedLine || trimmedLine.startsWith('//')) return;

            // パターン: "ソース [値] ターゲット" または "ソース ［値］ ターゲット"
            const match = trimmedLine.match(/^(.+?)\s*[\[［](\d+(?:\.\d+)?)[\]］]\s*(.+)$/);

            if (match) {
                const [, source, value, target] = match;
                const numValue = parseFloat(value);

                if (source.trim() && target.trim() && !isNaN(numValue) && numValue > 0) {
                    parsedLinks.push({
                        id: Date.now() + index,
                        source: source.trim(),
                        target: target.trim(),
                        value: numValue
                    });
                }
            }
        });

        this.links = parsedLinks;
        this.assignNodeColors();
        console.log('Parsed links:', this.links);
    }

    generatePastelColor(index) {
        // 美しいパステルカラーのパレット
        const pastelColors = [
            '#FFB6C1', // ライトピンク
            '#98FB98', // ペールグリーン
            '#87CEEB', // スカイブルー
            '#DDA0DD', // プラム
            '#F0E68C', // カーキ
            '#FFE4B5', // モカシン
            '#B0E0E6', // パウダーブルー
            '#F5DEB3', // ウィート
            '#FFC0CB', // ピンク
            '#AFEEEE', // ペールターコイズ
            '#D8BFD8', // シスル
            '#FFEFD5', // パパイヤホイップ
            '#E0E6FF', // ライトブルー
            '#FFE4E1', // ミスティローズ
            '#F0FFF0', // ハニーデュー
            '#FDF5E6', // オールドレース
            '#E6E6FA', // ラベンダー
            '#FFF8DC', // コーンシルク
            '#F5F5DC', // ベージュ
            '#FAFAD2'  // ライトゴールデンロッド
        ];

        return pastelColors[index % pastelColors.length];
    }

    assignNodeColors() {
        // 全ノードを抽出
        const nodeSet = new Set();
        this.links.forEach(link => {
            nodeSet.add(link.source);
            nodeSet.add(link.target);
        });

        // 各ノードにパステルカラーを割り当て
        Array.from(nodeSet).forEach((nodeName, index) => {
            this.nodeColors.set(nodeName, this.generatePastelColor(index));
        });

        console.log('Node colors assigned:', this.nodeColors);
    }

    formatNumber(num) {
        const formattedNum = num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        return this.unit ? `${formattedNum}${this.unit}` : formattedNum;
    }

    editNodeLabel(event, nodeData) {
        const groupElement = event.currentTarget;
        const currentName = nodeData.name;
        const currentValue = nodeData.value;

        // グループ全体を一時的に隠す
        groupElement.style.display = 'none';

        // グループの位置を取得
        const nameText = groupElement.querySelector('.node-name');
        const isLeftSide = nameText.getAttribute('text-anchor') === 'start';
        const x = parseFloat(nameText.getAttribute('x'));
        const y = parseFloat(nameText.getAttribute('y'));

        // 編集用のコンテナを作成
        const foreignObject = d3.select(groupElement.parentNode)
            .append('foreignObject')
            .attr('x', isLeftSide ? x - 5 : x - 135)
            .attr('y', y - 15)
            .attr('width', 140)
            .attr('height', 50);

        const container = foreignObject
            .append('xhtml:div')
            .style('display', 'flex')
            .style('flex-direction', 'column')
            .style('background', 'white')
            .style('border', '1px solid #4285f4')
            .style('border-radius', '4px')
            .style('padding', '4px')
            .style('font-size', '14px')
            .style('box-shadow', '0 2px 8px rgba(0,0,0,0.1)');

        // 名前入力フィールド
        const input = container
            .append('xhtml:input')
            .attr('type', 'text')
            .attr('value', currentName)
            .style('border', 'none')
            .style('outline', 'none')
            .style('padding', '2px 4px')
            .style('font-size', '14px')
            .style('font-weight', 'bold')
            .style('margin-bottom', '2px');

        // 値表示（読み取り専用）
        container
            .append('xhtml:div')
            .text(this.formatNumber(currentValue))
            .style('color', '#666')
            .style('font-size', '14px')
            .style('padding', '2px 4px')
            .style('text-align', isLeftSide ? 'left' : 'right');

        // フォーカスを設定してテキストを選択
        input.node().focus();
        input.node().select();

        // 編集完了時の処理
        const finishEdit = () => {
            const newName = input.node().value.trim();
            foreignObject.remove();
            groupElement.style.display = 'block';

            if (newName && newName !== currentName) {
                this.updateNodeName(currentName, newName);
            }
        };

        // イベントリスナー
        input.on('blur', finishEdit);
        input.on('keydown', (event) => {
            if (event.key === 'Enter') {
                finishEdit();
            } else if (event.key === 'Escape') {
                foreignObject.remove();
                groupElement.style.display = 'block';
            }
        });
    }

    updateNodeName(oldName, newName) {
        // リンクデータ内のノード名を更新
        this.links.forEach(link => {
            if (link.source === oldName) {
                link.source = newName;
            }
            if (link.target === oldName) {
                link.target = newName;
            }
        });

        // 色のマッピングを更新
        if (this.nodeColors.has(oldName)) {
            const color = this.nodeColors.get(oldName);
            this.nodeColors.delete(oldName);
            this.nodeColors.set(newName, color);
        }

        // テキストエリアを更新
        this.updateTextDataFromLinks();

        // ダイアグラムを再生成
        this.autoGenerateDiagram();

        console.log(`Node name changed: ${oldName} → ${newName}`);
    }

    updateTextDataFromLinks() {
        const textLines = this.links.map(link =>
            `${link.source} [${link.value}] ${link.target}`
        );
        document.getElementById('text-data').value = textLines.join('\n');
    }

    autoGenerateDiagram() {
        if (this.links.length > 0) {
            // より即座に反応するように遅延時間を短縮
            clearTimeout(this.updateTimeout);
            this.updateTimeout = setTimeout(() => {
                this.generateDiagram();
            }, 200); // 0.2秒の遅延でリアルタイム更新
        } else {
            // データがない場合はプレースホルダーを表示
            document.getElementById('chart-placeholder').classList.remove('hidden');
            document.getElementById('sankey-chart').classList.remove('active');
        }
    }

    prepareChartData() {
        if (!this.links || this.links.length === 0) {
=======
    switchInputMethod(method) {
        this.currentInputMethod = method;

        // ボタンのアクティブ状態を更新
        document.querySelectorAll('.method-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.getElementById(`${method}-input-btn`).classList.add('active');

        // 入力エリアの表示切替
        document.querySelectorAll('.input-container').forEach(container => {
            container.classList.remove('active');
        });
        document.getElementById(`${method}-input`).classList.add('active');
    }

    loadSampleData() {
        const sampleData = `source,target,value
Web広告,サイト訪問,1000
検索エンジン,サイト訪問,800
SNS,サイト訪問,600
サイト訪問,商品閲覧,1200
サイト訪問,離脱,1200
商品閲覧,カート追加,400
商品閲覧,離脱,800
カート追加,購入完了,300
カート追加,離脱,100`;

        document.getElementById('csv-data').value = sampleData;
        this.switchInputMethod('csv');
    }

    addLink() {
        const source = document.getElementById('source-input').value.trim();
        const target = document.getElementById('target-input').value.trim();
        const value = parseFloat(document.getElementById('value-input').value);

        if (!source || !target || isNaN(value) || value <= 0) {
            alert('すべての項目を正しく入力してください');
            return;
        }

        const linkId = Date.now();
        this.links.push({ id: linkId, source, target, value });

        this.updateLinksList();
        this.clearManualInputs();
    }

    updateLinksList() {
        const linksList = document.getElementById('links-list');
        linksList.innerHTML = '';

        this.links.forEach(link => {
            const linkItem = document.createElement('div');
            linkItem.className = 'link-item';
            linkItem.innerHTML = `
                <span>${link.source} → ${link.target} (${link.value})</span>
                <button onclick="tool.removeLink(${link.id})">削除</button>
            `;
            linksList.appendChild(linkItem);
        });
    }

    removeLink(linkId) {
        this.links = this.links.filter(link => link.id !== linkId);
        this.updateLinksList();
    }

    clearManualInputs() {
        document.getElementById('source-input').value = '';
        document.getElementById('target-input').value = '';
        document.getElementById('value-input').value = '';
    }

    parseCSVData() {
        const csvData = document.getElementById('csv-data').value.trim();
        if (!csvData) {
            alert('CSVデータを入力してください');
            return null;
        }

        const lines = csvData.split('\n');
        const data = [];

        // ヘッダー行をスキップ
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) continue;

            const [source, target, value] = line.split(',').map(item => item.trim());
            const numValue = parseFloat(value);

            if (source && target && !isNaN(numValue) && numValue > 0) {
                data.push({ source, target, value: numValue });
            }
        }

        return data.length > 0 ? data : null;
    }

    prepareChartData() {
        let data;

        if (this.currentInputMethod === 'csv') {
            data = this.parseCSVData();
        } else {
            data = this.links.map(link => ({
                source: link.source,
                target: link.target,
                value: link.value
            }));
        }

        if (!data || data.length === 0) {
>>>>>>> a96292e57ebae21211d01e2ddf3f0c16b66fe4dc
            alert('有効なデータがありません');
            return null;
        }

        // ノードを抽出
        const nodeSet = new Set();
<<<<<<< HEAD
        this.links.forEach(link => {
            nodeSet.add(link.source);
            nodeSet.add(link.target);
        });

        const nodes = Array.from(nodeSet).map(name => ({ name }));

        // ノード名からインデックスへのマップを作成
        const nodeIndexMap = new Map();
        nodes.forEach((node, index) => {
            nodeIndexMap.set(node.name, index);
        });

        // リンクのsource/targetをインデックスに変換
        const links = this.links.map(link => ({
            source: nodeIndexMap.get(link.source),
            target: nodeIndexMap.get(link.target),
            value: link.value
        }));

        console.log('Nodes:', nodes);
        console.log('Links with indices:', links);

=======
        data.forEach(d => {
            nodeSet.add(d.source);
            nodeSet.add(d.target);
        });

        const nodes = Array.from(nodeSet).map(name => ({ name }));
        const links = data.map(d => ({
            source: d.source,
            target: d.target,
            value: d.value
        }));

>>>>>>> a96292e57ebae21211d01e2ddf3f0c16b66fe4dc
        return { nodes, links };
    }

    generateDiagram() {
<<<<<<< HEAD
        console.log('generateDiagram called');
        console.log('Current links:', this.links);

        this.chartData = this.prepareChartData();
        console.log('Prepared chart data:', this.chartData);

=======
        this.chartData = this.prepareChartData();
>>>>>>> a96292e57ebae21211d01e2ddf3f0c16b66fe4dc
        if (!this.chartData) return;

        this.createSankeyChart(this.chartData);

        // プレースホルダーを隠してチャートを表示
        document.getElementById('chart-placeholder').classList.add('hidden');
        document.getElementById('sankey-chart').classList.add('active');
<<<<<<< HEAD

        console.log('Chart should be visible now');
    }

    createSankeyChart(data) {
        try {
            console.log('createSankeyChart called with data:', data);

            const chartContainer = document.getElementById('sankey-chart');
            if (!chartContainer) {
                console.error('Chart container not found');
                return;
            }

            chartContainer.innerHTML = '';

            // コンテナサイズを取得（複数の方法で試行）
            let containerWidth = chartContainer.clientWidth || chartContainer.offsetWidth;
            let containerHeight = chartContainer.clientHeight || chartContainer.offsetHeight;

            // サイズが取得できない場合はデフォルト値を使用
            if (containerWidth === 0) containerWidth = 800;
            if (containerHeight === 0) containerHeight = 600;

            const margin = { top: 10, right: 60, bottom: 10, left: 60 };
            const width = containerWidth - margin.left - margin.right;
            const height = containerHeight - margin.top - margin.bottom;

            console.log('Chart dimensions:', {
                width,
                height,
                containerWidth,
                containerHeight,
                clientWidth: chartContainer.clientWidth,
                clientHeight: chartContainer.clientHeight,
                offsetWidth: chartContainer.offsetWidth,
                offsetHeight: chartContainer.offsetHeight
            });

            // より柔軟な最小サイズチェック
            if (width < 100 || height < 100) {
                console.error('Chart container too small:', { width, height });
                // アラートの代わりにコンソールエラーのみ出力
                console.warn('Using minimum chart size instead');
                // 最小サイズを強制設定
                containerWidth = Math.max(containerWidth, 400);
                containerHeight = Math.max(containerHeight, 300);
            }

            const svg = d3.select('#sankey-chart')
                .append('svg')
                .attr('width', containerWidth)
                .attr('height', containerHeight);

            const g = svg.append('g')
                .attr('transform', `translate(${margin.left},${margin.top})`);

            // サンキーレイアウトを作成
            const sankey = d3.sankey()
                .nodeWidth(15)
                .nodePadding(10)
                .extent([[0, 0], [width, height]]);

            // サンキーデータを準備
            const sankeyData = {
                nodes: data.nodes.map(d => Object.assign({}, d)),
                links: data.links.map(d => Object.assign({}, d))
            };

            console.log('Sankey input data:', sankeyData);

            const sankeyResult = sankey(sankeyData);
            const { nodes, links } = sankeyResult;

            console.log('Sankey result:', { nodes, links });

            // リンクを描画（ソースノードの色を使用）
            g.append('g')
                .selectAll('path')
                .data(links)
                .enter().append('path')
                .attr('class', 'sankey-link')
                .attr('d', d3.sankeyLinkHorizontal())
                .attr('stroke', d => this.nodeColors.get(d.source.name) || '#cccccc')
                .attr('stroke-width', d => Math.max(1, d.width))
                .attr('stroke-opacity', 0.6)
                .attr('fill', 'none')
                .append('title')
                .text(d => `${d.source.name} → ${d.target.name}\n値: ${this.formatNumber(d.value)}`);

            // ノードを描画
            const node = g.append('g')
                .selectAll('g')
                .data(nodes)
                .enter().append('g')
                .attr('class', 'sankey-node');

            node.append('rect')
                .attr('x', d => d.x0)
                .attr('y', d => d.y0)
                .attr('height', d => Math.max(0, d.y1 - d.y0))
                .attr('width', d => Math.max(0, d.x1 - d.x0))
                .attr('fill', d => this.nodeColors.get(d.name) || '#cccccc')
                .append('title')
                .text(d => `${d.name}\n値: ${this.formatNumber(d.value)}`);

            // ノードのラベル（編集可能）
            const nodeGroups = node.append('g')
                .attr('class', 'node-label-group')
                .style('cursor', 'pointer');

            // ノード名（1行目）
            const nameLabels = nodeGroups.append('text')
                .attr('x', d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
                .attr('y', d => (d.y1 + d.y0) / 2 - 8)
                .attr('dy', '0.35em')
                .attr('text-anchor', d => d.x0 < width / 2 ? 'start' : 'end')
                .text(d => d.name)
                .attr('class', 'node-label node-name')
                .style('user-select', 'none');

            // 値（2行目）
            const valueLabels = nodeGroups.append('text')
                .attr('x', d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
                .attr('y', d => (d.y1 + d.y0) / 2 + 8)
                .attr('dy', '0.35em')
                .attr('text-anchor', d => d.x0 < width / 2 ? 'start' : 'end')
                .text(d => this.formatNumber(d.value))
                .attr('class', 'node-label node-value')
                .style('user-select', 'none')
                .style('fill', '#666');

            // クリックイベントをグループ全体に設定
            nodeGroups.on('click', (event, d) => {
                this.editNodeLabel(event, d);
            });

            console.log('Chart created successfully');
        } catch (error) {
            console.error('Error creating sankey chart:', error);
            alert('ダイアグラムの作成中にエラーが発生しました: ' + error.message);
        }
=======
    }

    createSankeyChart(data) {
        const chartContainer = document.getElementById('sankey-chart');
        chartContainer.innerHTML = '';

        const margin = { top: 20, right: 20, bottom: 20, left: 20 };
        const width = chartContainer.clientWidth - margin.left - margin.right;
        const height = chartContainer.clientHeight - margin.top - margin.bottom;

        const svg = d3.select('#sankey-chart')
            .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom);

        const g = svg.append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        // サンキーレイアウトを作成
        const sankey = d3.sankey()
            .nodeWidth(20)
            .nodePadding(20)
            .extent([[1, 1], [width - 1, height - 6]]);

        const { nodes, links } = sankey({
            nodes: data.nodes.map(d => Object.assign({}, d)),
            links: data.links.map(d => Object.assign({}, d))
        });

        // 色の設定
        const nodeColor = document.getElementById('node-color').value;
        const linkColor = document.getElementById('link-color').value;
        const opacity = parseFloat(document.getElementById('opacity-slider').value);

        // リンクを描画
        g.append('g')
            .selectAll('path')
            .data(links)
            .enter().append('path')
            .attr('class', 'sankey-link')
            .attr('d', d3.sankeyLinkHorizontal())
            .attr('stroke', linkColor)
            .attr('stroke-width', d => Math.max(1, d.width))
            .attr('stroke-opacity', opacity)
            .attr('fill', 'none')
            .append('title')
            .text(d => `${d.source.name} → ${d.target.name}\n値: ${d.value}`);

        // ノードを描画
        const node = g.append('g')
            .selectAll('g')
            .data(nodes)
            .enter().append('g')
            .attr('class', 'sankey-node');

        node.append('rect')
            .attr('x', d => d.x0)
            .attr('y', d => d.y0)
            .attr('height', d => d.y1 - d.y0)
            .attr('width', d => d.x1 - d.x0)
            .attr('fill', nodeColor)
            .append('title')
            .text(d => `${d.name}\n値: ${d.value}`);

        // ノードのラベル
        node.append('text')
            .attr('x', d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
            .attr('y', d => (d.y1 + d.y0) / 2)
            .attr('dy', '0.35em')
            .attr('text-anchor', d => d.x0 < width / 2 ? 'start' : 'end')
            .text(d => d.name)
            .filter(d => d.x0 < width / 2)
            .attr('x', d => d.x1 + 6)
            .attr('text-anchor', 'start');
    }

    updateChartStyle() {
        if (!this.chartData) return;

        const links = d3.selectAll('.sankey-link');
        const nodes = d3.selectAll('.sankey-node rect');

        const linkColor = document.getElementById('link-color').value;
        const nodeColor = document.getElementById('node-color').value;
        const opacity = parseFloat(document.getElementById('opacity-slider').value);

        links.attr('stroke', linkColor)
            .attr('stroke-opacity', opacity);

        nodes.attr('fill', nodeColor);
>>>>>>> a96292e57ebae21211d01e2ddf3f0c16b66fe4dc
    }

    exportSVG() {
        const svg = document.querySelector('#sankey-chart svg');
        if (!svg) {
            alert('エクスポートするダイアグラムがありません');
            return;
        }

        const svgData = new XMLSerializer().serializeToString(svg);
        const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
        const svgUrl = URL.createObjectURL(svgBlob);

        const downloadLink = document.createElement('a');
        downloadLink.href = svgUrl;
        downloadLink.download = 'sankey-diagram.svg';
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        URL.revokeObjectURL(svgUrl);
    }
}

<<<<<<< HEAD
// DOMが読み込まれた後にアプリケーションを初期化
document.addEventListener('DOMContentLoaded', () => {
    // D3.jsが正しく読み込まれているかチェック
    if (typeof d3 === 'undefined') {
        alert('D3.jsライブラリが読み込まれていません。インターネット接続を確認してください。');
        return;
    }

    if (typeof d3.sankey === 'undefined') {
        alert('d3-sankeyライブラリが読み込まれていません。インターネット接続を確認してください。');
        return;
    }

    console.log('D3.js libraries loaded successfully');

    const tool = new SankeyDiagramTool();

    // グローバル変数として設定（削除ボタンのonclick用）
    window.tool = tool;
}); 
=======
// アプリケーションを初期化
const tool = new SankeyDiagramTool(); 
>>>>>>> a96292e57ebae21211d01e2ddf3f0c16b66fe4dc
